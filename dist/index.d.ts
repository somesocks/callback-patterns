/** @namespace callback-patterns */
import Assert from './Assert';
import Background from './Background';
import Bridge from './Bridge';
import Callbackify from './Callbackify';
import Delay from './Delay';
import If from './If';
import InParallel from './InParallel';
import Logging from './Logging';
import Memoize from './Memoize';
import ParallelFilter from './ParallelFilter';
import ParallelMap from './ParallelMap';
import Promisify from './Promisify';
import Race from './Race';
import Throttle from './Throttle';
import TimeIn from './TimeIn';
import TimeOut from './TimeOut';
import Timer from './Timer';
import While from './While';
import Retry from './Retry';
declare const _default: {
    unstable: {
        TraceError: (_1: import("./types/Task").default) => import("./types/Task").default;
    };
    Assert: typeof Assert;
    Background: typeof Background;
    Bridge: typeof Bridge;
    Callbackify: typeof Callbackify;
    CatchError: (_1: any) => import("./types/Task").default;
    Delay: typeof Delay;
    If: typeof If;
    InOrder: (...args: import("./types/Task").default[]) => import("./types/Task").default;
    InParallel: typeof InParallel;
    InSeries: (...args: import("./types/Task").default[]) => import("./types/Task").default;
    Logging: typeof Logging;
    Memoize: typeof Memoize;
    ParallelFilter: typeof ParallelFilter;
    ParallelMap: typeof ParallelMap;
    PassThrough: import("./types/Task").default;
    Promisify: typeof Promisify;
    Race: typeof Race;
    Throttle: typeof Throttle;
    TimeIn: typeof TimeIn;
    TimeOut: typeof TimeOut;
    Timer: typeof Timer;
    While: typeof While;
    Retry: typeof Retry;
};
export = _default;
